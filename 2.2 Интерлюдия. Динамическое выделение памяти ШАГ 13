// Вам доступны следующие функции:
size_t read_size();
int64_t* array_int_min( int64_t* array, size_t size );
int64_t** marray_read( size_t* rows, size_t* sizes[]);
void marray_free( int64_t** marray, size_t rows );
void marray_print(int64_t** marray, size_t* sizes, size_t rows);


// Указатель на минимальное из двух чисел.
// если хотя бы одно число NULL, то возвращать второе
// если оба числа NULL результат NULL
int64_t* int64_ptr_min(int64_t* x, int64_t* y) {
      if(x==NULL && y==NULL){
      return NULL;
      }
    else if(x==NULL){
    return y;
    }
    else if(y==NULL){
    return x;
    }
    else if(*x>*y){
    return y;
    }
    else{
    return x;
    }
}

// Вернуть адрес минимального элемента массива массивов
int64_t* marray_int_min( int64_t** marray, size_t* sizes, size_t rows ) {
    int64_t* min =0;
    for(size_t i =0;i<rows;i++){
        if(sizes[i]!=0){
        min = array_int_min(marray[i], sizes[i]);
        }
    }
    return min;
}

// Вычесть m изо всех элементов массива
void marray_normalize( int64_t** marray, size_t* sizes, size_t rows, int64_t m ) {
  for(size_t i=0;i<rows;i++){
      for(size_t l=0;l<sizes[i];l++){
          marray[i][l]=marray[i][l]-m;
      }
  }
}

// Прочитать, найти минимум и нормализовать массив, вывести результат
void perform() {
  size_t Irows = 0; 
    size_t*Isizes   = 0;
    size_t* rows = &Irows;
    size_t**sizes = &Isizes;
    int64_t** marray = marray_read(rows, sizes);      
    if(!marray) {
        marray_free(marray, *rows);
        free(rows);
        free(sizes);  
        
        return;
    }
    int64_t* m = marray_int_min(marray,*sizes, *rows);
    if(m == NULL) {
        marray_free(marray, *rows);   
        free(rows);
        free(sizes);  
        
        return;
    }
    marray_normalize(marray, *sizes, *rows, *m);
    marray_print(marray, sizes, *rows);         
    marray_free(marray, *rows);    
   
    free(*sizes);
}
